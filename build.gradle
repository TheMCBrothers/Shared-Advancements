plugins {
    id 'java-library'
    id 'idea'
    id 'maven-publish'
    id 'net.neoforged.gradle.userdev' version '7.+'
    id 'me.modmuss50.mod-publish-plugin' version '0.4.+'
}

version = "$minecraft_version-$mod_version"
group = mod_group_id

repositories {
    mavenLocal()
}

base {
    archivesName = maven_name
}

// Mojang ships Java 17 to end users in 1.18+, so your mod should target Java 17.
java.toolchain.languageVersion = JavaLanguageVersion.of(17)

println "Java: ${System.getProperty 'java.version'}, JVM: ${System.getProperty 'java.vm.version'} (${System.getProperty 'java.vendor'}), Arch: ${System.getProperty 'os.arch'}"
runs {
    // applies to all the run configs below
    configureEach {
        // Recommended logging data for a userdev environment
        // The markers can be added/remove as needed separated by commas.
        // "SCAN": For mods scan.
        // "REGISTRIES": For firing of registry events.
        // "REGISTRYDUMP": For getting the contents of all registries.
        systemProperty 'forge.logging.markers', 'REGISTRIES'

        // Recommended logging level for the console
        // You can set various levels here.
        // Please read: https://stackoverflow.com/questions/2031163/when-to-use-the-different-log-levels
        systemProperty 'forge.logging.console.level', 'debug'

        modSource project.sourceSets.main
    }

    client {
        // Comma-separated list of namespaces to load gametests from. Empty = all namespaces.
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
    }

    server {
        systemProperty 'forge.enabledGameTestNamespaces', project.mod_id
        programArgument '--nogui'
    }

    data {
        // example of overriding the workingDirectory set in configureEach above, uncomment if you want to use it
        // workingDirectory project.file('run-data')

        // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
        programArguments.addAll '--mod', project.mod_id, '--all', '--output', file('src/generated/resources/').getAbsolutePath(), '--existing', file('src/main/resources/').getAbsolutePath()
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

dependencies {
    implementation "net.neoforged:neoforge:${neo_version}"
}

tasks.withType(ProcessResources).configureEach {
    var replaceProperties = [
            minecraft_version   : minecraft_version, minecraft_version_range: minecraft_version_range,
            neo_version         : neo_version, neo_version_range: neo_version_range,
            loader_version_range: loader_version_range,
            mod_id              : mod_id, mod_name: mod_name, mod_license: mod_license, mod_version: version,
            mod_authors         : mod_authors, mod_description: mod_description, pack_format_number: pack_format_number,
            curse_project       : curse_project
    ]
    inputs.properties replaceProperties

    filesMatching(['META-INF/mods.toml', 'pack.mcmeta']) {
        expand replaceProperties + [project: project]
    }
}

publishing {
    publications { PublicationContainer publicationContainer ->
        publicationContainer.register("maven", MavenPublication) { MavenPublication publication ->
            publication.artifact(jar)
            publication.version("$project.version")
            publication.artifactId("$project.maven_name")
        }
    }
    repositories {
        maven {
            credentials {
                username = System.getenv('nexus_uname')
                password = System.getenv('nexus_pwd')
            }

            url 'https://nexus.themcbrothers.net/repository/maven-releases/'
        }
    }
}

var curseForgeKey = providers.environmentVariable('cf_key')
var modrinthToken = providers.environmentVariable('modrinth_token')

publishMods {
    file = jar.archiveFile
    changelog = file('changelog.md').text
    type = artifact_type == 'release' ? STABLE : artifact_type == 'beta' ? BETA : ALPHA
    dryRun = true

    modLoaders.add("neoforge")

    // Publish to CurseForge
    if (curseForgeKey.isPresent()) {
        curseforge {
            accessToken = curseForgeKey
            projectId = curse_project
            displayName = "S.A. $version"
            minecraftVersions.add(minecraft_version)
            minecraftVersions.add("server")
        }
    }

    // Publish to Modrinth
    if (modrinthToken.isPresent()) {
        modrinth {
            accessToken = modrinthToken
            projectId = modrinth_project
            displayName = version
            minecraftVersions.add(minecraft_version)
        }
    }
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}
